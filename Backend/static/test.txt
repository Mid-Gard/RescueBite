To return JSON data to the `detail` page in your Flask application, you can modify your existing `detail` route function to handle both HTML and JSON responses. This way, you can render the HTML template when the client requests the page via a web browser, and return JSON data when the client requests the data in JSON format. Here's how you can achieve this:

1. Import the necessary modules at the beginning of your script:

```python
from flask import jsonify
```

2. Modify your `detail` route function to handle both HTML and JSON responses:

```python
@app.route('/detail', methods=['POST', 'GET'])
def detail():
    if request.method == 'POST':
        fname = request.form['fname']
        ftask = request.form['ftask']
        fnote = request.form['fnote']
        fcat = request.form['fcat']

        todo = Todo(name=fname, task=ftask, cat=fcat, note=fnote)
        db.session.add(todo)
        db.session.commit()

    allTodo = Todo.query.all()

    # Check if the client accepts JSON response
    if request.accept_mimetypes.best == 'application/json':
        todo_list = [{"id": item.id, "name": item.name, "task": item.task,
                      "cat": item.cat, "note": item.note, "date": item.date.strftime('%Y-%m-%d %H:%M:%S')}
                     for item in allTodo]
        return jsonify(todo_list)

    return render_template('detail.html', title="details page", allTodo=allTodo)
```

In this modified function, when a client accesses the `/detail` route, the function first checks if the client accepts JSON response (`request.accept_mimetypes.best == 'application/json'`). If the client accepts JSON, the function creates a list of dictionaries containing the task information and returns it as JSON using the `jsonify` function. If the client doesn't accept JSON or if the request is not AJAX, the function renders the HTML template with the `allTodo` data.

With this setup, you can access the `/detail` route and get the task data in JSON format by setting the appropriate headers in your request. For example, you can use JavaScript on your frontend to make an AJAX request to this route with the `Accept: application/json` header to receive the JSON data.

Remember to adjust your frontend code accordingly to handle the JSON response and update the UI with the returned data.